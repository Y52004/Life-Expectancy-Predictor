{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMnd9kBiH3qz25wuJz0eJCA"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"G_YU8t5smCoR","executionInfo":{"status":"ok","timestamp":1748632129649,"user_tz":-330,"elapsed":3219,"user":{"displayName":"Yash rawat","userId":"08136662444472559547"}}},"outputs":[],"source":["import pandas as pd\n","from sklearn.tree import DecisionTreeClassifier\n","from sklearn.model_selection import train_test_split\n","import pickle\n","from google.colab import files"]},{"cell_type":"code","source":["df = pd.read_csv('life_expectancy_classified.csv')\n","\n","# Create classes if not already done\n","df['LifeExp_Class'] = pd.qcut(df['Life expectancy'], q=3, labels=['Low', 'Medium', 'High'])\n","\n","# Prepare features and target using iloc\n","X = df.iloc[:, :4]  # Selects first 4 columns (Adult Mortality, infant deaths, GDP, BMI)\n","y = df.iloc[:, -1]  # Selects last column (LifeExp_Class)\n","\n","# Split and train\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","model = DecisionTreeClassifier(random_state=42)\n","model.fit(X_train, y_train)\n","\n","# Save the model as .pkl file\n","with open('life_expectancy_model.pkl', 'wb') as f:\n","    pickle.dump(model, f)\n","\n","print(\"Model saved successfully as life_expectancy_model.pkl!\")\n","# Download the .pkl file to your computer\n","from google.colab import files\n","files.download('life_expectancy_model.pkl')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":34},"id":"DT9pQQlgmMAX","executionInfo":{"status":"ok","timestamp":1748632449061,"user_tz":-330,"elapsed":77,"user":{"displayName":"Yash rawat","userId":"08136662444472559547"}},"outputId":"54dbf850-fb20-47fa-dd7f-316912277419"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Model saved successfully as life_expectancy_model.pkl!\n"]},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["download(\"download_39875d8e-5246-4211-8509-a9db79d5271a\", \"life_expectancy_model.pkl\", 33229)"]},"metadata":{}}]},{"cell_type":"code","source":[],"metadata":{"id":"iFOS9e78na41"},"execution_count":null,"outputs":[]}]}